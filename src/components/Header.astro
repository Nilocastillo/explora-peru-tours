---
import LanguageSelector from "@/components/LanguageSelector.astro";
import HeaderLink from "@/components/HeaderLink.astro";
import { getI18N } from "@/i18n/index";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "../i18n/utils";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const navItems = [
  { key: "nav.nosotros", path: "/nosotros/" },
  { key: "nav.paquetes", path: "/paquetes/" },
  { key: "nav.tours", path: "/tours/" },
];
const linkBaseClass =
  "text-xl transition-all duration-300 py-1 px-4 pb-0.5 text-black hover:bg-primary rounded-full hover:text-white";
---

---

<nav
  class="fixed top-0 left-0 right-0 z-20 transition-all duration-300 border-b border-transparent pt-2 bg-white"
>
  <div
    class="max-w-7xl mx-auto flex justify-around items-center py-10 md:py-8 lg:py-8 relative"
  >
    <!-- Logo -->
    <div class="ashrink-0 logo-container text-white">
      <a href="/">
        <img
          src="/logo-explora-peru-tours.svg"
          alt="Explora Perú Tours"
          class="h-14 lg:h-18 w-auto object-contain"
          width="350"
          height="auto"
          loading="eager"
        />
      </a>
    </div>
    <!-- Enlaces del menu -->
    <div
      class="md:flex hidden lg:block items-center gap-12 space-x-4 md:-space-x-8 lg:space-x-10 lg:ml-10 z-10"
    >
      {
        navItems.map((item) => (
          <HeaderLink class={linkBaseClass} href={translatePath(item.path)}>
            {t(item.key)}
          </HeaderLink>
        ))
      }
    </div>
    <LanguageSelector />

    <!-- Botón menú móvil -->
    <button
      aria-label="Abrir menú de navegación"
      aria-controls="mobile-menu"
      aria-expanded="false"
      class="md:hidden p-2 text-primary focus:outline-none z-20 absolute right-6"
      id="mobile-menu-button"
    >
      <svg
        id="icon-hamburger"
        class="w-6 h-6 cursor-pointer"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>

      <svg
        id="icon-close"
        class="w-6 h-6 cursor-pointer hidden"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <div
    class="hidden md:hidden absolute top-full left-0 right-0 w-full bg-opacity-95 bg-white shadow-lg z-50"
    id="mobile-menu"
  >
    <div class="px-4 pt-4 pb-5 space-y-3 max-w-md mx-auto">
      {
        navItems.map((item) => (
          <HeaderLink
            class="block py-2 px-4 tracking-wide text-lg text-center text-primary hover:text-secondary"
            href={translatePath(item.path)}
          >
            {t(item.key)}
          </HeaderLink>
        ))
      }
    </div>
  </div>
</nav>

<style>
  :global(.navbar-scrolled) {
    background-color: white;
    transform: translateY(0);
    transition: all 0.3s ease;
    border-bottom: 0.5px solid var(--color-primary);
  }

  :global(.navbar-scrolled .logo-container img) {
    transform: scale(0.9);
  }

  nav a img {
    transition: transform 0.3s ease;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const iconHamburger = document.getElementById("icon-hamburger");
    const iconClose = document.getElementById("icon-close");

    if (menuButton && mobileMenu && iconHamburger && iconClose) {
      menuButton.addEventListener("click", (e) => {
        e.stopPropagation();
        mobileMenu.classList.toggle("hidden");
        iconHamburger.classList.toggle("hidden");
        iconClose.classList.toggle("hidden");

        const expanded = mobileMenu.classList.contains("hidden")
          ? "false"
          : "true";
        menuButton.setAttribute("aria-expanded", expanded);
      });

      document.addEventListener("click", (e) => {
        const target = e.target as Node;
        const isClickInside =
          (menuButton?.contains(target) ?? false) ||
          (mobileMenu?.contains(target) ?? false);

        if (!mobileMenu?.classList.contains("hidden") && !isClickInside) {
          mobileMenu?.classList.add("hidden");
          iconHamburger?.classList.remove("hidden");
          iconClose?.classList.add("hidden");
          menuButton?.setAttribute("aria-expanded", "false");
        }
      });

      const navbar = document.querySelector("nav");
      const handleScroll = () => {
        if (window.scrollY > 50) {
          navbar?.classList.add("navbar-scrolled");
        } else {
          navbar?.classList.remove("navbar-scrolled");
        }
      };

      window.addEventListener("scroll", handleScroll);

      const closeMenu = () => {
        if (!mobileMenu || !menuButton || !iconHamburger || !iconClose) return;
        if (mobileMenu.classList.contains("hidden")) return;
        mobileMenu.classList.add("hidden");
        iconHamburger.classList.remove("hidden");
        iconClose.classList.add("hidden");
        menuButton.setAttribute("aria-expanded", "false");
      };

      if (mobileMenu) {
        mobileMenu.querySelectorAll("a").forEach((a) => {
          a.addEventListener("click", closeMenu);
        });
      }

      window.addEventListener("hashchange", closeMenu);
    }
  });
</script>
